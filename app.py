from flask import Flask, render_template, request
from requests import get, post
from bs4 import BeautifulSoup
import json
from time import time
from urllib.parse import quote  # Updated import

app = Flask(__name__)

# Country flag mapping (Add all countries as needed)
country_flags = {
    "AF": "ğŸ‡¦ğŸ‡«", "AL": "ğŸ‡¦ğŸ‡±", "DZ": "ğŸ‡©ğŸ‡¿", "AS": "ğŸ‡¦ğŸ‡¸", "AD": "ğŸ‡¦ğŸ‡©", "AO": "ğŸ‡¦ğŸ‡´", "AR": "ğŸ‡¦ğŸ‡·", "AM": "ğŸ‡¦ğŸ‡²", 
    "AW": "ğŸ‡¦ğŸ‡¼", "AU": "ğŸ‡¦ğŸ‡º", "AT": "ğŸ‡¦ğŸ‡¹", "AZ": "ğŸ‡¦ğŸ‡¿", "BS": "ğŸ‡§ğŸ‡¸", "BH": "ğŸ‡§ğŸ‡­", "BD": "ğŸ‡§ğŸ‡©", "BB": "ğŸ‡§ğŸ‡§", 
    "BY": "ğŸ‡§ğŸ‡¾", "BE": "ğŸ‡§ğŸ‡ª", "BZ": "ğŸ‡§ğŸ‡¿", "BJ": "ğŸ‡§ğŸ‡¯", "BM": "ğŸ‡§ğŸ‡²", "BT": "ğŸ‡§ğŸ‡¹", "BO": "ğŸ‡§ğŸ‡´", "BA": "ğŸ‡§ğŸ‡¦", 
    "BW": "ğŸ‡§ğŸ‡¼", "BR": "ğŸ‡§ğŸ‡·", "BN": "ğŸ‡§ğŸ‡³", "BG": "ğŸ‡§ğŸ‡¬", "BF": "ğŸ‡§ğŸ‡«", "BI": "ğŸ‡§ğŸ‡®", "KH": "ğŸ‡°ğŸ‡­", "CM": "ğŸ‡¨ğŸ‡²", 
    "CA": "ğŸ‡¨ğŸ‡¦", "CV": "ğŸ‡¨ğŸ‡»", "KY": "ğŸ‡°ğŸ‡¾", "CF": "ğŸ‡¨ğŸ‡«", "TD": "ğŸ‡¹ğŸ‡©", "CL": "ğŸ‡¨ğŸ‡±", "CN": "ğŸ‡¨ğŸ‡³", "CO": "ğŸ‡¨ğŸ‡´", 
    "CR": "ğŸ‡¨ğŸ‡·", "CU": "ğŸ‡¨ğŸ‡º", "CY": "ğŸ‡¨ğŸ‡¾", "CZ": "ğŸ‡¨ğŸ‡¿", "DR": "ğŸ‡©ğŸ‡´", "DK": "ğŸ‡©ğŸ‡°", "DJ": "ğŸ‡©ğŸ‡¯", "DM": "ğŸ‡©ğŸ‡²", 
    "DO": "ğŸ‡©ğŸ‡´", "EC": "ğŸ‡ªğŸ‡¨", "EG": "ğŸ‡ªğŸ‡¬", "SV": "ğŸ‡¸ğŸ‡»", "GQ": "ğŸ‡¬ğŸ‡¶", "ER": "ğŸ‡ªğŸ‡·", "EE": "ğŸ‡ªğŸ‡ª", "SZ": "ğŸ‡¸ğŸ‡¿", 
    "ET": "ğŸ‡ªğŸ‡¹", "FI": "ğŸ‡«ğŸ‡®", "FJ": "ğŸ‡«ğŸ‡¯", "FM": "ğŸ‡«ğŸ‡²", "FR": "ğŸ‡«ğŸ‡·", "GA": "ğŸ‡¬ğŸ‡¦", "GB": "ğŸ‡¬ğŸ‡§", "GD": "ğŸ‡¬ğŸ‡©", 
    "GE": "ğŸ‡¬ğŸ‡ª", "GH": "ğŸ‡¬ğŸ‡­", "GI": "ğŸ‡¬ğŸ‡®", "GR": "ğŸ‡¬ğŸ‡·", "GL": "ğŸ‡¬ğŸ‡±", "GT": "ğŸ‡¬ğŸ‡¹", "GN": "ğŸ‡¬ğŸ‡³", "GW": "ğŸ‡¬ğŸ‡¼", 
    "GY": "ğŸ‡¬ğŸ‡¾", "HT": "ğŸ‡­ğŸ‡¹", "HN": "ğŸ‡­ğŸ‡³", "HK": "ğŸ‡­ğŸ‡°", "HU": "ğŸ‡­ğŸ‡º", "IS": "ğŸ‡®ğŸ‡¸", "IN": "ğŸ‡®ğŸ‡³", "ID": "ğŸ‡®ğŸ‡©", 
    "IR": "ğŸ‡®ğŸ‡·", "IQ": "ğŸ‡®ğŸ‡¶", "IE": "ğŸ‡®ğŸ‡ª", "IL": "ğŸ‡®ğŸ‡±", "IT": "ğŸ‡®ğŸ‡¹", "JM": "ğŸ‡¯ğŸ‡²", "JP": "ğŸ‡¯ğŸ‡µ", "JO": "ğŸ‡¯ğŸ‡´", 
    "KZ": "ğŸ‡°ğŸ‡¿", "KE": "ğŸ‡°ğŸ‡ª", "KI": "ğŸ‡°ğŸ‡®", "KP": "ğŸ‡°ğŸ‡µ", "KR": "ğŸ‡°ğŸ‡·", "KW": "ğŸ‡°ğŸ‡¼", "KG": "ğŸ‡°ğŸ‡¬", "LA": "ğŸ‡±ğŸ‡¦", 
    "LV": "ğŸ‡±ğŸ‡»", "LB": "ğŸ‡±ğŸ‡§", "LS": "ğŸ‡±ğŸ‡¸", "LR": "ğŸ‡±ğŸ‡·", "LY": "ğŸ‡±ğŸ‡¾", "LI": "ğŸ‡±ğŸ‡®", "LT": "ğŸ‡±ğŸ‡¹", "LU": "ğŸ‡±ğŸ‡º", 
    "MO": "ğŸ‡²ğŸ‡´", "MK": "ğŸ‡²ğŸ‡°", "MG": "ğŸ‡²ğŸ‡¬", "MW": "ğŸ‡²ğŸ‡¼", "MY": "ğŸ‡²ğŸ‡¾", "MV": "ğŸ‡²ğŸ‡»", "ML": "ğŸ‡²ğŸ‡±", "MT": "ğŸ‡²ğŸ‡¹", 
    "MH": "ğŸ‡²ğŸ‡­", "MQ": "ğŸ‡²ğŸ‡¶", "MR": "ğŸ‡²ğŸ‡·", "MU": "ğŸ‡²ğŸ‡º", "YT": "ğŸ‡¾ğŸ‡¹", "MX": "ğŸ‡²ğŸ‡½", "FM": "ğŸ‡«ğŸ‡²", "MD": "ğŸ‡²ğŸ‡©", 
    "MC": "ğŸ‡²ğŸ‡¨", "MN": "ğŸ‡²ğŸ‡³", "ME": "ğŸ‡²ğŸ‡ª", "MS": "ğŸ‡²ğŸ‡¸", "MA": "ğŸ‡²ğŸ‡¦", "MZ": "ğŸ‡²ğŸ‡¿", "MM": "ğŸ‡²ğŸ‡²", "NA": "ğŸ‡³ğŸ‡¦", 
    "NR": "ğŸ‡³ğŸ‡·", "NP": "ğŸ‡³ğŸ‡µ", "NL": "ğŸ‡³ğŸ‡±", "NC": "ğŸ‡³ğŸ‡¨", "NE": "ğŸ‡³ğŸ‡ª", "NG": "ğŸ‡³ğŸ‡¬", "NI": "ğŸ‡³ğŸ‡®", "NE": "ğŸ‡³ğŸ‡ª", 
    "NO": "ğŸ‡³ğŸ‡´", "NP": "ğŸ‡³ğŸ‡µ", "NP": "ğŸ‡³ğŸ‡µ", "OM": "ğŸ‡´ğŸ‡²", "PA": "ğŸ‡µğŸ‡¦", "PE": "ğŸ‡µğŸ‡ª", "PF": "ğŸ‡µğŸ‡«", "PH": "ğŸ‡µğŸ‡­", 
    "PK": "ğŸ‡µğŸ‡°", "PL": "ğŸ‡µğŸ‡±", "PT": "ğŸ‡µğŸ‡¹", "PR": "ğŸ‡µğŸ‡·", "QA": "ğŸ‡¶ğŸ‡¦", "RO": "ğŸ‡·ğŸ‡´", "RU": "ğŸ‡·ğŸ‡º", "RW": "ğŸ‡·ğŸ‡¼", 
    "SA": "ğŸ‡¸ğŸ‡¦", "SN": "ğŸ‡¸ğŸ‡³", "RS": "ğŸ‡·ğŸ‡¸", "SC": "ğŸ‡¸ğŸ‡¨", "SL": "ğŸ‡¸ğŸ‡±", "SG": "ğŸ‡¸ğŸ‡¬", "SK": "ğŸ‡¸ğŸ‡°", "SI": "ğŸ‡¸ğŸ‡®", 
    "SO": "ğŸ‡¸ğŸ‡´", "ZA": "ğŸ‡¿ğŸ‡¦", "SS": "ğŸ‡¸ğŸ‡¸", "ES": "ğŸ‡ªğŸ‡¸", "LK": "ğŸ‡±ğŸ‡°", "SD": "ğŸ‡¸ğŸ‡©", "SR": "ğŸ‡¸ğŸ‡·", "SZ": "ğŸ‡¸ğŸ‡¿", 
    "SE": "ğŸ‡¸ğŸ‡ª", "CH": "ğŸ‡¨ğŸ‡­", "SY": "ğŸ‡¸ğŸ‡¾", "TW": "ğŸ‡¹ğŸ‡¼", "TJ": "ğŸ‡¹ğŸ‡¯", "TZ": "ğŸ‡¹ğŸ‡¿", "TH": "ğŸ‡¹ğŸ‡­", "TG": "ğŸ‡¹ğŸ‡¬", 
    "TO": "ğŸ‡¹ğŸ‡´", "TT": "ğŸ‡¹ğŸ‡¹", "TN": "ğŸ‡¹ğŸ‡³", "TR": "ğŸ‡¹ğŸ‡·", "TM": "ğŸ‡¹ğŸ‡²", "TC": "ğŸ‡¹ğŸ‡¨", "TV": "ğŸ‡¹ğŸ‡»", "UG": "ğŸ‡ºğŸ‡¬", 
    "UA": "ğŸ‡ºğŸ‡¦", "AE": "ğŸ‡¦ğŸ‡ª", "GB": "ğŸ‡¬ğŸ‡§", "US": "ğŸ‡ºğŸ‡¸", "UY": "ğŸ‡ºğŸ‡¾", "UZ": "ğŸ‡ºğŸ‡¿", "VU": "ğŸ‡»ğŸ‡º", "VE": "ğŸ‡»ğŸ‡ª", 
    "VN": "ğŸ‡»ğŸ‡³", "WF": "ğŸ‡¼ğŸ‡«", "YE": "ğŸ‡¾ğŸ‡ª", "ZM": "ğŸ‡¿ğŸ‡²", "ZW": "ğŸ‡¿ğŸ‡¼"
}

# Function to fetch TikTok user data
def info(secuid):
    try:
        url = f'https://tiktok.com/@{secuid}'
        headers = {
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36'
        }
        r = get(url, headers=headers).text
        soup = BeautifulSoup(r, "html.parser")
        data = soup.find("script", {"id": "__UNIVERSAL_DATA_FOR_REHYDRATION__"})
        data = json.loads(data.string)
        user_info = data["__DEFAULT_SCOPE__"]["webapp.user-detail"]["userInfo"]["user"]
        stats = data["__DEFAULT_SCOPE__"]["webapp.user-detail"]["userInfo"]["stats"]

        return {
            'follower': stats.get('followerCount'),
            'following': stats.get('followingCount'),
            'likes': stats.get('heart'),
            'bio': user_info.get('signature'),
            'created': user_info.get('createTime'),
            'region': user_info.get('region'),
            'private': user_info.get('privateAccount'),
            'last_username_change': None if user_info.get('uniqueIdModifyTime') == 0 else user_info.get('uniqueIdModifyTime'),
            'last_nickname_change': user_info.get('nickNameModifyTime'),
            'profile_picture': user_info.get('avatarLarger'),
            'passkey': None
        }
    except:
        return {
            'follower': None,
            'following': None,
            'likes': None,
            'bio': None,
            'created': None,
            'region': None,
            'private': None,
            'last_username_change': None,
            'last_nickname_change': None,
            'profile_picture': None,
            'passkey': None
        }

# Function to check if TikTok account has passkey
def check_passkey(username):
    try:
        iid = int(bin(int(time()))[2:].zfill(32) + "0" * 32, 2)
        did = int(bin(int(time() + time() * 0.0004))[2:].zfill(32) + "0" * 32, 2)
        url = f'https://api16-normal-c-useast1a.tiktokv.com/passport/find_account/tiktok_username/?request_tag_from=h5&iid={iid}&device_id={did}&ac=wifi&channel=googleplay&aid=567753'
        payload = f'mix_mode=1&username={username}'
        r = post(url, data=payload).json()
        if r['message'] != 'success':
            return False

        ticket = r['data']['token']
        url = f'https://api16-normal-c-useast1a.tiktokv.com/passport/auth/available_ways/?request_tag_from=h5&not_login_ticket={ticket}&iid={iid}&device_id={did}&ac=wifi&channel=googleplay&aid=567753'
        return get(url).json()['data']['has_passkey']
    except:
        return False

# Format numbers like K, M, T for large numbers
def format_number(num):
    if num is None:
        return "Unknown"
    if num >= 1_000_000_000_000:
        return f"{num / 1_000_000_000_000:.1f}T"
    elif num >= 1_000_000_000:
        return f"{num / 1_000_000_000:.1f}B"
    elif num >= 1_000_000:
        return f"{num / 1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num / 1_000:.1f}K"
    else:
        return str(num)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        username = request.form['username']
        user_data = info(username)
        user_data['followers'] = format_number(user_data['follower'])
        user_data['following'] = format_number(user_data['following'])
        user_data['likes'] = format_number(user_data['likes'])

        region = country_flags.get(user_data['region'], user_data['region'])
        
        # Check for passkey
        if check_passkey(username):
            user_data['passkey'] = 'Yes'

        return render_template('index.html', user_data=user_data, region=region)
    
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
